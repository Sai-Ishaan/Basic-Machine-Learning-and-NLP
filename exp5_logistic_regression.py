# -*- coding: utf-8 -*-
"""Exp5 Logistic Regression(1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oUUTCADnpZSm6fWyQI4r3jxu74Dy8zHE
"""

ls

ls

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

df = pd.read_csv('bank-full.csv', sep = ';')
print(df.head(10))

df["y"] = (df["y"]=="yes").astype(int)


print(df)

import numpy as np
import statsmodels.api as sm

# Define predictor variable and response variable
x = df['balance']
y = df['y']

# Fit logistic regression model
model = sm.Logit(df.y, sm.add_constant(df.balance)).fit()

# Get odds ratio
odds_ratio = np.exp(model.params)
print("Odds Ratio:")
print(odds_ratio)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix

# Sample dataset (replace with your actual data)
df = pd.read_csv('bank-full.csv')  # Load your dataset here
# list of variables which needs to be changed
col = ['y']
df = pd.DataFrame(df)
# function definition
def convert(x):
    return x.map({'yes':1,'no':0})

# calling the function
df[col] = df[col].apply(convert)
# Assuming 'balance' is a relevant feature and 'default' is the target variable
df['y'] = (df['y']=='yes').astype(int)
x = df.age
y = df.y

#df["default"] = (df["default"]=="yes").astype(int)

print(df)
# Split data into train and test sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

model = LogisticRegression()
model.fit(x_train.values.reshape(-1, 1), y_train)

sns.regplot(x=x_train, y=y_train, logistic=True, ci=None)
plt.xlabel("Balance")
plt.ylabel("Probability of Default")
plt.title("Logistic Regression Curve")
plt.show()

plt.scatter(x_train, y_train, color='blue', label='Actual')
plt.plot(x_train, model.predict_proba(x_train.values.reshape(-1, 1))[:, 1], color='red', label='Predicted')
plt.xlabel("Balance")
plt.ylabel("Probability of Default")
plt.title("Scatter Plot with Logistic Regression Prediction")
plt.legend()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix

# Sample dataset (replace with your actual data)
df = pd.read_csv('bank-full.csv')  # Load your dataset here

# Convert 'yes' and 'no' in the 'y' column to 1 and 0
df['y'] = (df['y'] == 'yes').astype(int)

# Select relevant features and target variable
features = ['age', 'balance', 'campaign', 'previous']
target = 'y'

X = df[features]
y = df[target]

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Plot logistic regression curve
sns.regplot(x=X_train['balance'], y=y_train, logistic=True, ci=None)
plt.xlabel("Balance")
plt.ylabel("Probability of Default")
plt.title("Logistic Regression Curve")
plt.show()

# Plot scatter plot with logistic regression prediction
plt.scatter(X_train['balance'], y_train, color='blue', label='Actual')
plt.plot(X_train['balance'], model.predict_proba(X_train)[:, 1], color='red', label='Predicted')
plt.xlabel("Balance")
plt.ylabel("Probability of Default")
plt.title("Scatter Plot with Logistic Regression Prediction")
plt.legend()
plt.show()

# Evaluate the model using confusion matrix
y_pred = model.predict(X_test)
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(conf_matrix)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix

# Sample dataset (replace with your actual data)
df = pd.read_csv('bank-full.csv', sep=';')  # Load your dataset here

# Convert 'yes' and 'no' in the 'y' column to 1 and 0
df['y'] = (df['y'] == 'yes').astype(int)

# Select relevant features and target variable
features = ['age', 'balance', 'campaign', 'previous']
target = 'y'

X = df[features]
y = df[target]

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Plot logistic regression curve
sns.regplot(x=X_train['balance'], y=y_train, logistic=True, ci=None)
plt.xlabel("Balance")
plt.ylabel("Probability of Default")
plt.title("Logistic Regression Curve")
plt.show()

# Plot scatter plot with logistic regression prediction
plt.scatter(X_train['balance'], y_train, color='blue', label='Actual')
plt.plot(X_train['balance'], model.predict_proba(X_train)[:, 1], color='red', label='Predicted')
plt.xlabel("Balance")
plt.ylabel("Probability of Default")
plt.title("Scatter Plot with Logistic Regression Prediction")
plt.legend()
plt.show()

# Evaluate the model using confusion matrix
y_pred = model.predict(X_test)
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(conf_matrix)

df

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.metrics import classification_report
# Sample dataset (replace with your actual data)
df = pd.read_csv('bank-full.csv', sep=';')  # Load your dataset here

# Convert 'yes' and 'no' in the 'y' column to 1 and 0
df['y'] = (df['y'] == 'yes').astype(int)

# Select relevant features and target variable
features = ['age', 'balance', 'campaign', 'previous']
target = 'y'

X = df[features]
y = df[target]

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Evaluate the model using confusion matrix
y_pred = model.predict(X_test)
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(conf_matrix)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")
print("\nClassification Report:\n", classification_report(y_test, y_pred))

